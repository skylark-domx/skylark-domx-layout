{"version":3,"sources":["oriented.js"],"names":["define","geom","styler","finder","Orientation","_getChild","el","childNum","options","currentChild","i","children","length","style","display","excluding","includes","closest","draggable","elCSS","css","elWidth","contentRect","width","child1","child2","firstChildCSS","secondChildCSS","firstChildWidth","marginSize","secondChildWidth","flexDirection","Vertical","Horizontal","gridTemplateColumns","split","float","touchingSideChild2","clear","CSSFloatProperty"],"mappings":";;;;;;;AAAAA,QACC,oBACA,sBACA,sBACA,iBACC,SACDC,EACAC,EACAC,EACAC,GAWA,SAASC,EAAUC,EAAIC,EAAUC,GAKhC,IAJA,IAAIC,EAAe,EAClBC,EAAI,EACJC,EAAWL,EAAGK,SAERD,EAAIC,EAASC,QAAQ,CAC3B,GAC+B,SAA9BD,EAASD,GAAGG,MAAMC,UAGjBN,EAAQO,UAAUC,SAASL,EAASD,KACrCP,EAAOc,QAAQN,EAASD,GAAIF,EAAQU,UAAWZ,GAAI,GAClD,CACD,GAAIG,IAAiBF,EACpB,OAAOI,EAASD,GAEjBD,IAGDC,IAED,OAAO,KAoDR,OA7CA,SAAkBJ,EAAIE,GACrB,IAAIW,EAAQjB,EAAOkB,IAAId,GAEtBe,EAAUpB,EAAKqB,YAAYhB,GAAIiB,MAE/BC,EAASnB,EAAUC,EAAI,EAAGE,GAC1BiB,EAASpB,EAAUC,EAAI,EAAGE,GAC1BkB,EAAgBF,GAAUtB,EAAOkB,IAAII,GACrCG,EAAiBF,GAAUvB,EAAOkB,IAAIK,GAEtCG,EAAkBJ,GAAUvB,EAAK4B,WAAWL,GAAQD,MACpDO,EAAmBL,GAAUxB,EAAK4B,WAAWJ,GAAQF,MAEtD,GAAsB,SAAlBJ,EAAML,QACT,MAA+B,WAAxBK,EAAMY,eAAsD,mBAAxBZ,EAAMY,cAC/C3B,EAAY4B,SAAW5B,EAAY6B,WAGtC,GAAsB,SAAlBd,EAAML,QACT,OAAOK,EAAMe,oBAAoBC,MAAM,KAAKvB,QAAU,EAAIR,EAAY4B,SAAW5B,EAAY6B,WAG9F,GAAIT,GAAkC,SAAxBE,EAAcU,MAAkB,CAC7C,IAAIC,EAA6C,SAAxBX,EAAcU,MAAmB,OAAS,QAEnE,OAAOX,GAAoC,SAAzBE,EAAeW,OAAoBX,EAAeW,QAAUD,EACtDjC,EAAY6B,WAAnC7B,EAAY4B,SAGd,OAAQR,IAEoB,UAA1BE,EAAcZ,SACY,SAA1BY,EAAcZ,SACY,UAA1BY,EAAcZ,SACY,SAA1BY,EAAcZ,SACdc,GAAmBP,GACS,SAA5BF,EAAMoB,mBACNd,GAC4B,SAA5BN,EAAMoB,mBACNX,EAAkBE,EAAmBT,GAEtCjB,EAAY4B,SAAW5B,EAAY6B","file":"../oriented.js","sourcesContent":["define([\r\n\t\"skylark-domx-geom\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-finder\",\r\n\t\"./Orientation\"\r\n],function(\r\n\tgeom,\r\n\tstyler,\r\n\tfinder,\r\n\tOrientation\r\n){\r\n\r\n\t/**\r\n\t * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)\r\n\t * and non-draggable elements\r\n\t * @param  {HTMLElement} el       The parent element\r\n\t * @param  {Number} childNum      The index of the child\r\n\t * @param  {Object} options       Parent Sortable's options\r\n\t * @return {HTMLElement}          The child at index childNum, or null if not found\r\n\t */\r\n\tfunction _getChild(el, childNum, options) {\r\n\t\tvar currentChild = 0,\r\n\t\t\ti = 0,\r\n\t\t\tchildren = el.children;\r\n\r\n\t\twhile (i < children.length) {\r\n\t\t\tif (\r\n\t\t\t\tchildren[i].style.display !== 'none' &&\r\n\t\t\t\t//children[i] !== ghostEl &&\r\n\t\t\t\t//children[i] !== dragEl &&\r\n\t\t\t\t!options.excluding.includes(children[i] ) && \r\n\t\t\t\tfinder.closest(children[i], options.draggable, el, false)\r\n\t\t\t) {\r\n\t\t\t\tif (currentChild === childNum) {\r\n\t\t\t\t\treturn children[i];\r\n\t\t\t\t}\r\n\t\t\t\tcurrentChild++;\r\n\t\t\t}\r\n\r\n\t\t\ti++;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Detects children orientation.\r\n\t */\r\n\tfunction oriented(el, options) {\r\n\t\tvar elCSS = styler.css(el),\r\n\r\n\t\t\telWidth = geom.contentRect(el).width,\r\n\r\n\t\t\tchild1 = _getChild(el, 0, options),\r\n\t\t\tchild2 = _getChild(el, 1, options),\r\n\t\t\tfirstChildCSS = child1 && styler.css(child1),\r\n\t\t\tsecondChildCSS = child2 && styler.css(child2),\r\n\r\n\t\t\tfirstChildWidth = child1 && geom.marginSize(child1).width,\r\n\t\t\tsecondChildWidth = child2 && geom.marginSize(child2).width;\r\n\r\n\t\tif (elCSS.display === 'flex') {\r\n\t\t\treturn elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse'\r\n\t\t\t? Orientation.Vertical : Orientation.Horizontal;\r\n\t\t}\r\n\r\n\t\tif (elCSS.display === 'grid') {\r\n\t\t\treturn elCSS.gridTemplateColumns.split(' ').length <= 1 ? Orientation.Vertical : Orientation.Horizontal;\r\n\t\t}\r\n\r\n\t\tif (child1 && firstChildCSS.float !== 'none') {\r\n\t\t\tvar touchingSideChild2 = firstChildCSS.float === 'left' ? 'left' : 'right';\r\n\r\n\t\t\treturn child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ?\r\n\t\t\t\tOrientation.Vertical : Orientation.Horizontal;\r\n\t\t}\r\n\r\n\t\treturn (child1 &&\r\n\t\t\t(\r\n\t\t\t\tfirstChildCSS.display === 'block' ||\r\n\t\t\t\tfirstChildCSS.display === 'flex' ||\r\n\t\t\t\tfirstChildCSS.display === 'table' ||\r\n\t\t\t\tfirstChildCSS.display === 'grid' ||\r\n\t\t\t\tfirstChildWidth >= elWidth &&\r\n\t\t\t\telCSS[CSSFloatProperty] === 'none' ||\r\n\t\t\t\tchild2 &&\r\n\t\t\t\telCSS[CSSFloatProperty] === 'none' &&\r\n\t\t\t\tfirstChildWidth + secondChildWidth > elWidth\r\n\t\t\t) ?\r\n\t\t\tOrientation.Vertical : Orientation.Horizontal\r\n\t\t);\r\n\t}\r\n\r\n\treturn oriented;\r\n});"]}