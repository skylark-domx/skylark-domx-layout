{"version":3,"sources":["skylark-domx-layout.js"],"names":["define","skylark","langx","layouts","Orientation","layout","horz","vert","$","box","container","options","mixin","items","wspacing","hspacing","orientation","size","clientSize","width","height","x","y","$items","children","each","i","this","css","left","top","position","display","bsgrid","Error","columns","DockStyle","none","right","bottom","client","datax","finder","geom","dock","dim","l","t","w","h","filter","item","data","concat","forEach","region","childSize","id","styler","elm","bounds","pos","relativeRect","flow","grid","MasonryLayouter","klass","_measureColumns","_","calculated","columnWidth","firstItem","extraWidth","gutter","containerWidth","cols","excess","mathMethod","Math","max","_positionItem","isInstant","relativePositionitem","animation","moveto","_getColGroup","colSpan","colYs","colGroup","groupCount","groupColYs","slice","apply","_getItemLayoutPosition","itemSize","marginSize","remainder","min","minimumY","shortColIndex","indexOf","setHeight","setSpan","length","_filterItems","_resetLayout","push","maxY","_calcLayout","calcInfos","_postLayout","autoFit","domNode","style","calcInfo","init","masonry","layouter","rows","table","main"],"mappings":"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","file":"../skylark-domx-layout.js","sourcesContent":["define('skylark-domx-layout/layouts',[\r\n    \"skylark-utils-dom/skylark\",\r\n    \"skylark-utils-dom/langx\"\r\n], function(skylark, langx) {\r\n\t\r\n\tvar layouts = skylark.layouts = {\r\n\t};\r\n\r\n\r\n\treturn layouts;\r\n});\ndefine('skylark-domx-layout/Orientation',[\r\n    \"skylark-langx/langx\",\r\n    \"./layouts\"\r\n], function(langx,layouts) {\r\n\r\n    var Orientation = layout.Orientation = {\r\n    \t\"horz\" : 1, \r\n    \t\"vert\" : 2\r\n    };\r\n    return Orientation;\r\n});\r\n\ndefine('skylark-domx-layout/box',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/query\",\r\n    \"./layouts\",\r\n    \"./Orientation\"\r\n], function(langx, $, layouts, Orientation) {\r\n    // TODO : This module will be deleted.\r\n    var box = layouts.box = function(container,options) {\r\n        var options = langx.mixin({\r\n            items : \".item\", // children element selector for item\r\n            wspacing : 100, // width for spacing a child element\r\n            hspacing : 100, // height for spacing a child element\r\n            orientation : Orientation.vert // Laid out elements direction,\r\n        },options)\r\n\r\n\r\n        var size = $(container).clientSize(),\r\n            width = size.width,\r\n            height = size.height,\r\n            x = 0, \r\n            y = 0;\r\n            \r\n        var $items = $(container).children(options.items);        \r\n\r\n        $items.each(function(i){\r\n            // layouts inited item child\r\n            $(this).css({\r\n                \"left\" : x,\r\n                \"top\" : y,\r\n                \"position\" : \"absolute\",\r\n                \"display\" : \"inline-block\"\r\n            });\r\n\r\n            // 垂直排列\r\n            if (options.orientation == Orientation.vert) {\r\n                y += options.hspacing;\r\n                if (y >= (height - options.hspacing)) {\r\n                    y = 0; \r\n                    x += options.wspacing;\r\n                }\r\n            } else {\r\n                x += options.wspacing;\r\n                if (x >= (width - options.wspacing)) {\r\n                    x = 0; \r\n                    y += options.hspacing;\r\n                }\r\n            }\r\n\r\n        });\r\n    };\r\n    \r\n    return box;        \r\n    \r\n});\r\n\ndefine('skylark-domx-layout/bsgrid',[\r\n    \"skylark-langx/langx\",\r\n    \"./layouts\"\r\n], function(langx,layouts) {\r\n    // summary:\r\n    //  The bsgrid layouter is a bootstrap grid layout manager. \r\n\r\n    //TODO: \r\n    var bsgrid = layouts.bsgrid = function(container,options) {\r\n        throw new Error (\"This method is not implemented!\");\r\n    };\r\n\r\n    return bsgrid;\r\n});\r\n\ndefine('skylark-domx-layout/columns',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/query\",\r\n    \"./layouts\",\r\n], function(langx,$,layouts) {\r\n    // summary:\r\n    //  The bsgrid layouter is a layout manager that adds each child item to a separate column. \r\n\r\n    var columns = layouts.columns = function(container,options) {\r\n        var options = langx.mixin({\r\n            items : \".item\" // children element selector for item\r\n        },options)       \r\n        var $items = $(container).children(options.items);     \r\n        $items.css({\r\n            \"left\" : \"0px\",\r\n            \"top\" : \"0px\",\r\n            \"position\" : \"relative\",\r\n            \"display\" : \"table-cell\"\r\n        });\r\n    };\r\n    \r\n    return columns;    \r\n    \r\n});\r\n\ndefine('skylark-domx-layout/DockStyle',[\r\n    \"skylark-langx/langx\",\r\n    \"./layouts\",\r\n],function(langx,layouts) {\r\n\r\n\tvar DockStyle = layouts.DockStyle = {\r\n\t\t\"none\" : 1, \r\n\t\t\"left\" : 2, \r\n\t\t\"top\" : 3, \r\n\t\t\"right\" : 4, \r\n\t\t\"bottom\" : 5, \r\n\t\t\"client\" : 6\r\n\t};\r\n\r\n\treturn DockStyle;\r\n\r\n});\r\n\ndefine('skylark-domx-layout/dock',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/datax\",\r\n    \"skylark-utils-dom/finder\",\r\n    \"skylark-utils-dom/geom\",\r\n    \"./layouts\",\r\n\t\"./DockStyle\",\r\n], function(langx,datax,finder,geom,layouts,geom,DockStyle) {\r\n\r\n    var dock = layouts.dock = function(container,options) {\r\n        var options = langx.mixin({\r\n            items : \"[data-region]\" // children element selector for item\r\n        },options)       \r\n\r\n        var size = geom.clientSize(container),\r\n        \tdim = {\r\n        \t\tl : 0,\r\n        \t\tt : 0,\r\n        \t\tw : size.width,\r\n        \t\th : size.height,\r\n        \t},\r\n        \tchildren = finder.children(container,options.items);\r\n\r\n\t\tchildren = children.filter(function(item){ return datax.data(item,\"region\") != \"client\"; })\r\n\t\t\t.concat(children.filter(function(item){ return datax.data(item,\"region\") == \"client\"; }));\r\n\r\n\t\t// set positions/sizes\r\n\t\tchildren.forEach(function(item){\r\n\t\t\tvar region = datax.data(item,\"region\"),\r\n\t\t\t    childSize = geom.size(item);\r\n\r\n\t\t\tif(!region){\r\n\t\t\t\tthrow new Error(\"No dock setting for \" + item.id)\r\n\t\t\t}\r\n\r\n\t\t\t// set elem to upper left corner of unused space; may move it later\r\n\r\n\t\t\tstyler.css(elm,{\r\n\t\t\t\tposition : \"absolute\"\r\n\t\t\t});\r\n\r\n\t\t\t// Size adjustments to make to this child widget\r\n\t\t\tvar bounds = {\r\n\t\t\t\tleft : dim.l,\r\n\t\t\t\ttop : dim.t\r\n\t\t\t};\r\n\r\n\t\t\t// set size && adjust record of remaining space.\r\n\t\t\t// note that setting the width of a <div> may affect its height.\r\n\t\t\tif(region == \"top\" || region == \"bottom\"){\r\n\t\t\t\tbounds.width = dim.w;\r\n\t\t\t\tdim.h -= childSize.height;\r\n\t\t\t\tif(\"region\" == \"top\"){\r\n\t\t\t\t\tdim.t += childSize.height;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tbounds.top = dim.t + dim.h;\r\n\t\t\t\t}\r\n\t\t\t}else if(region == \"left\" || region == \"right\"){\r\n\t\t\t\tbounds.height = dim.h;\r\n\t\t\t\tdim.w -= childSize.width;\r\n\t\t\t\tif(pos == \"left\"){\r\n\t\t\t\t\tdim.l += childSize.width;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tbounds.left = dim.l + dim.w;\r\n\t\t\t\t}\r\n\t\t\t}else if(region == \"client\"){\r\n\t\t\t\tbounds.width = dim.w;\r\n\t\t\t\tbounds.height = dim.h;\r\n\t\t\t}\r\n\r\n\t\t\tgeom.relativeRect(item,bounds);\r\n\t\t});\r\n\r\n\r\n    };\r\n    \r\n    return dock;    \r\n\r\n});\r\n\ndefine('skylark-domx-layout/flow',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/query\",\r\n    \"./layouts\",\r\n], function(langx,$,layouts) {\r\n    // summary:\r\n    //  The flow layouter is a layout manager that adds items to the right sequentially from the left. \r\n    //  If it can not be added to the right side, it will be added back to the left one position to the left.\r\n    //  It does not change the size of the item added as a big feature of the flow layouter at all. \r\n    //  Therefore, it is placed as it is with the recommended size that the added item has or the explicitly specified size.\r\n\r\n    var flow = layouts.flow = function(container,options) {\r\n        var options = langx.mixin({\r\n            items : \".item\" // children element selector for item\r\n        },options)       \r\n        var $items = $(container).children(options.items);        \r\n        $items.css({\r\n            \"left\" : \"0px\",\r\n            \"top\" : \"0px\",\r\n            \"position\" : \"relative\",\r\n            \"display\" : \"inline-block\"\r\n        });\r\n    };\r\n    \r\n    return flow;\r\n    \r\n});\r\n\ndefine('skylark-domx-layout/grid',[\r\n    \"skylark-langx/langx\",\r\n    \"./layouts\"\r\n], function(langx,layouts) {\r\n    //TODO: \r\n    var grid = layouts.grid = function(container,options) {\r\n        throw new Error (\"This method is not implemented!\");\r\n    };\r\n\r\n    return grid;\r\n});\r\n\ndefine('skylark-domx-layout/masonry',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/finder\",\r\n    \"skylark-utils-dom/geom\",\r\n    \"skylark-utils-dom/styler\",\r\n    \"./layouts\"\r\n],function(langx,finder,geom,styler,layouts) {\r\n    // summary:\r\n    //  The masnory layouter is a masonry grid layout manager. \r\n   \r\n    var MasonryLayouter = langx.klass({\r\n        _measureColumns: function(children, bounds, container) {\r\n\r\n            var _ = this._,\r\n                calculated = _.calculated;\r\n            // if columnWidth is 0, default to outerWidth of first item\r\n            if (!_.columnWidth) {\r\n                var firstItem = children[0];\r\n                // columnWidth fall back to item of first element\r\n                calculated.columnWidth = firstItem && firstItem.bounds().extraWidth() || bounds.width;\r\n            } else {\r\n                calculated.columnWidth = _.columnWidth;\r\n            }\r\n\r\n            var columnWidth = calculated.columnWidth += _.gutter;\r\n\r\n            // calculate columns\r\n            var containerWidth = bounds.width + _.gutter;\r\n            var cols;\r\n            if (_.cols) {\r\n                cols = _.cols;\r\n            } else {\r\n                var cols = containerWidth / columnWidth;\r\n                // fix rounding errors, typically with gutters\r\n                var excess = columnWidth - containerWidth % columnWidth;\r\n                // if overshoot is less than a pixel, round up, otherwise floor it\r\n                var mathMethod = excess && excess < 1 ? 'round' : 'floor';\r\n                cols = Math[mathMethod](cols);\r\n            }\r\n            calculated.cols = Math.max(cols, 1);\r\n        },\r\n\r\n        _positionItem: function(item, x, y, isInstant) {\r\n            styler.css(item, {\r\n                position: \"absolute\" \r\n            });\r\n            if (isInstant) {\r\n                // if not transition, just set CSS\r\n                geom.relativePositionitem(item,{\r\n                    left : x,\r\n                    top : y\r\n                });\r\n            } else {\r\n                item[this._.animation] ? item[this._.animation](x, y) : item.moveto(x, y);\r\n            }\r\n        },\r\n        _getColGroup: function(colSpan) {\r\n            var _ = this._,\r\n                calculated = _.calculated;\r\n\r\n            if (colSpan < 2) {\r\n                // if brick spans only one column, use all the column Ys\r\n                return calculated.colYs;\r\n            }\r\n\r\n            var colGroup = [];\r\n            // how many different places could this brick fit horizontally\r\n            var groupCount = calculated.cols + 1 - colSpan;\r\n            // for each group potential horizontal position\r\n            for (var i = 0; i < groupCount; i++) {\r\n                // make an array of colY values for that one group\r\n                var groupColYs = calculated.colYs.slice(i, i + colSpan);\r\n                // and get the max value of the array\r\n                colGroup[i] = Math.max.apply(Math, groupColYs);\r\n            }\r\n            return colGroup;\r\n        },\r\n\r\n        _getItemLayoutPosition: function(item) {\r\n            var _ = this._,\r\n                calculated = _.calculated;\r\n\r\n            var itemSize = geom.marginSize(item);\r\n            // how many columns does this brick span\r\n            var remainder = itemSize.width % calculated.columnWidth;\r\n            var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';\r\n            // round if off by 1 pixel, otherwise use ceil\r\n            var colSpan = Math[mathMethod](itemSize.width / calculated.columnWidth);\r\n            colSpan = Math.min(colSpan, calculated.cols);\r\n\r\n            var colGroup = this._getColGroup(colSpan);\r\n            // get the minimum Y value from the columns\r\n            var minimumY = Math.min.apply(Math, colGroup);\r\n            var shortColIndex = colGroup.indexOf(minimumY);\r\n\r\n            // position the brick\r\n            var position = {\r\n                x: calculated.columnWidth * shortColIndex,\r\n                y: minimumY\r\n            };\r\n\r\n            // apply setHeight to necessary columns\r\n            var setHeight = minimumY + itemSize.height;\r\n            var setSpan = calculated.cols + 1 - colGroup.length;\r\n            for (var i = 0; i < setSpan; i++) {\r\n                calculated.colYs[shortColIndex + i] = setHeight;\r\n            }\r\n            return position;\r\n        },\r\n\r\n        \"_filterItems\": function(items) {\r\n            return items;\r\n        },\r\n\r\n        \"_resetLayout\": function(children, bounds, container) {\r\n            var _ = this._,\r\n                calculated = _.calculated;\r\n            this._measureColumns(children, bounds, container);\r\n\r\n            // reset column Y\r\n            calculated.colYs = [];\r\n            for (var i = 0; i < calculated.cols; i++) {\r\n                calculated.colYs.push(0);\r\n            }\r\n            calculated.maxY = 0;\r\n        },\r\n\r\n        \"_calcLayout\": function(children, bounds, container) {\r\n            this._resetLayout(children, bounds, container);\r\n            var calcInfos = [];\r\n\r\n            children.forEach(function(item) {\r\n                // get x/y object from method\r\n                var position = this._getItemLayoutPosition(item);\r\n                // enqueue\r\n                position.item = item;\r\n                //position.isInstant = isInstant || item.isLayoutInstant;\r\n                calcInfos.push(position);\r\n            }, this);\r\n            return calcInfos;\r\n        },\r\n\r\n        \"_postLayout\": function(calcInfos, container) {\r\n            var _ = this._;\r\n            if (_.autoFit) {\r\n                //var size = container.size;\r\n                //size.height = _.calculated.maxY;\r\n                //container.size = size;\r\n                //TODO: needs a better implementation\r\n                var calculated = _.calculated,\r\n                    maxY = Math.max.apply(Math, calculated.colYs);\r\n\r\n                container.domNode.style.height = maxY + \"px\";\r\n            }\r\n            calcInfos.forEach(function(calcInfo) {\r\n                this._positionItem(calcInfo.item, calcInfo.x, calcInfo.y, calcInfo.isInstant);\r\n            }, this);\r\n            //return children;\r\n        },\r\n\r\n        \"layout\": function() {\r\n            var _ = this._,\r\n                container = _.container,\r\n                children = finder.children(container,_.items),\r\n                bounds = geom.clientSize(container);\r\n                \r\n            var calcInfos = this._calcLayout(children,bounds,container);\r\n            this._postLayout(calcInfos,container);\r\n        },\r\n\r\n        \"init\": function(container,options) {\r\n            var _ = this._ =  langx.mixin ({\r\n                autoFit: true, //dd\r\n                columnWidth: 0, //dd\r\n                cols: 0, //d\r\n                gutter: 0, //\r\n                animation: \"moveto\", //dd\r\n                calculated: {\r\n                    colYs: null,\r\n                    columnWidth: 0,\r\n                    cols: 0\r\n                }\r\n            },options);\r\n            _.container = container;\r\n        }\r\n    });\r\n\r\n    \r\n    var masonry  = layouts.masonry = function(container,options) {\r\n        var layouter = new MasonryLayouter(container,options);\r\n        layouter.layout();\r\n    };\r\n\r\n    return masonry;\r\n});\r\n\ndefine('skylark-domx-layout/rows',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/query\",\r\n    \"./layouts\",\r\n], function(langx,$,layouts) {\r\n    // summary:\r\n    //  The bsgrid layouter is a layout manager that adds each child item to a separate row. \r\n\r\n    var rows = layouts.rows = function(container,options) {\r\n        var options = langx.mixin({\r\n            items : \".item\" // children element selector for item\r\n        },options)       \r\n        var $items = $(container).children(options.items);     \r\n        $items.css({\r\n            \"left\" : \"0px\",\r\n            \"top\" : \"0px\",\r\n            \"position\" : \"relative\",\r\n            \"display\" : \"list-item\"\r\n        });\r\n    };\r\n    \r\n    return rows;\r\n    \r\n});\r\n\ndefine('skylark-domx-layout/table',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/query\",\r\n    \"./layouts\",\r\n], function(langx,$,layouts) {\r\n\r\n    var table = layouts.table = function(container,options) {\r\n        var options = langx.mixin({\r\n            items : \".item\" // children element selector for item\r\n        },options)       \r\n        var $items = $(container).children(options.items);             \r\n\r\n        $items.css({\r\n            \"width\" : \"100%\",\r\n            \"display\" : \"table-row\"\r\n        });\r\n\r\n        $items.each(function(){\r\n            $(this).children().css({\r\n                \"display\" : \"table-cell\"\r\n            });\r\n        })\r\n    };\r\n    \r\n    return table;    \r\n\r\n});\r\n\ndefine('skylark-domx-layout/main',[\r\n    \"./layouts\",\r\n    \"./box\",\r\n    \"./bsgrid\",\r\n    \"./columns\",\r\n    \"./dock\",\r\n    \"./DockStyle\",\r\n    \"./flow\",\r\n    \"./grid\",\r\n    \"./masonry\",\r\n    \"./rows\",\r\n    \"./table\"\r\n], function(layouts) {\r\n\r\n\treturn layouts;\r\n});\ndefine('skylark-domx-layout', ['skylark-domx-layout/main'], function (main) { return main; });\n\n"]}