{"version":3,"sources":["skylark-utils-layout.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","hasOwnProperty","Error","module","args","forEach","apply","window","skylarkjs","skylark","langx","layouts","Orientation","layout","horz","vert","$","box","container","options","mixin","items","wspacing","hspacing","orientation","size","clientSize","width","height","x","y","$items","children","each","this","css","left","top","position","display","bsgrid","columns","DockStyle","none","right","bottom","client","datax","finder","geom","dock","dim","l","t","w","h","filter","item","data","concat","region","childSize","styler","elm","bounds","pos","relativeRect","flow","grid","MasonryLayouter","klass","_measureColumns","_","calculated","columnWidth","firstItem","extraWidth","cols","gutter","containerWidth","excess","mathMethod","Math","max","_positionItem","isInstant","relativePositionitem","animation","moveto","_getColGroup","colSpan","colYs","colGroup","groupCount","groupColYs","slice","_getItemLayoutPosition","itemSize","marginSize","remainder","min","minimumY","shortColIndex","indexOf","setHeight","setSpan","_filterItems","_resetLayout","maxY","_calcLayout","calcInfos","_postLayout","autoFit","domNode","style","calcInfo","init","masonry","layouter","rows","table","main"],"mappings":"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","file":"../skylark-utils-layout.js","sourcesContent":["define('skylark-utils-layout/layouts',[\r\n    \"skylark-utils/skylark\",\r\n    \"skylark-utils/langx\"\r\n], function(skylark, langx) {\r\n\t\r\n\tvar layouts = skylark.layouts = {\r\n\t};\r\n\r\n\r\n\treturn layouts;\r\n});\ndefine('skylark-utils-layout/Orientation',[\r\n    \"skylark-langx/langx\",\r\n    \"./layouts\"\r\n], function(langx,layouts) {\r\n\r\n    var Orientation = layout.Orientation = {\r\n    \t\"horz\" : 1, \r\n    \t\"vert\" : 2\r\n    };\r\n    return Orientation;\r\n});\r\n\ndefine('skylark-utils-layout/box',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils/query\",\r\n    \"./layouts\",\r\n    \"./Orientation\"\r\n], function(langx, $, layouts, Orientation) {\r\n    // TODO : This module will be deleted.\r\n    var box = layouts.box = function(container,options) {\r\n        var options = langx.mixin({\r\n            items : \".item\", // children element selector for item\r\n            wspacing : 100, // width for spacing a child element\r\n            hspacing : 100, // height for spacing a child element\r\n            orientation : Orientation.vert // Laid out elements direction,\r\n        },options)\r\n\r\n\r\n        var size = $(container).clientSize(),\r\n            width = size.width,\r\n            height = size.height,\r\n            x = 0, \r\n            y = 0;\r\n            \r\n        var $items = $(container).children(options.items);        \r\n\r\n        $items.each(function(i){\r\n            // layouts inited item child\r\n            $(this).css({\r\n                \"left\" : x,\r\n                \"top\" : y,\r\n                \"position\" : \"absolute\",\r\n                \"display\" : \"inline-block\"\r\n            });\r\n\r\n            // 垂直排列\r\n            if (options.orientation == Orientation.vert) {\r\n                y += options.hspacing;\r\n                if (y >= (height - options.hspacing)) {\r\n                    y = 0; \r\n                    x += options.wspacing;\r\n                }\r\n            } else {\r\n                x += options.wspacing;\r\n                if (x >= (width - options.wspacing)) {\r\n                    x = 0; \r\n                    y += options.hspacing;\r\n                }\r\n            }\r\n\r\n        });\r\n    };\r\n    \r\n    return box;        \r\n    \r\n});\r\n\ndefine('skylark-utils-layout/bsgrid',[\r\n    \"skylark-langx/langx\",\r\n    \"./layouts\"\r\n], function(langx,layouts) {\r\n    // summary:\r\n    //  The bsgrid layouter is a bootstrap grid layout manager. \r\n\r\n    //TODO: \r\n    var bsgrid = layouts.bsgrid = function(container,options) {\r\n        throw new Error (\"This method is not implemented!\");\r\n    };\r\n\r\n    return bsgrid;\r\n});\r\n\ndefine('skylark-utils-layout/columns',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils/query\",\r\n    \"./layouts\",\r\n], function(langx,$,layouts) {\r\n    // summary:\r\n    //  The bsgrid layouter is a layout manager that adds each child item to a separate column. \r\n\r\n    var columns = layouts.columns = function(container,options) {\r\n        var options = langx.mixin({\r\n            items : \".item\" // children element selector for item\r\n        },options)       \r\n        var $items = $(container).children(options.items);     \r\n        $items.css({\r\n            \"left\" : \"0px\",\r\n            \"top\" : \"0px\",\r\n            \"position\" : \"relative\",\r\n            \"display\" : \"table-cell\"\r\n        });\r\n    };\r\n    \r\n    return columns;    \r\n    \r\n});\r\n\ndefine('skylark-utils-layout/DockStyle',[\r\n    \"skylark-langx/langx\",\r\n    \"./layouts\",\r\n],function(langx,layouts) {\r\n\r\n\tvar DockStyle = layouts.DockStyle = {\r\n\t\t\"none\" : 1, \r\n\t\t\"left\" : 2, \r\n\t\t\"top\" : 3, \r\n\t\t\"right\" : 4, \r\n\t\t\"bottom\" : 5, \r\n\t\t\"client\" : 6\r\n\t};\r\n\r\n\treturn DockStyle;\r\n\r\n});\r\n\ndefine('skylark-utils-layout/dock',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils/datax\",\r\n    \"skylark-utils/finder\",\r\n    \"skylark-utils/geom\",\r\n    \"./layouts\",\r\n\t\"./DockStyle\",\r\n], function(langx,datax,finder,geom,layouts,geom,DockStyle) {\r\n\r\n    var dock = layouts.dock = function(container,options) {\r\n        var options = langx.mixin({\r\n            items : \"[data-region]\" // children element selector for item\r\n        },options)       \r\n\r\n        var size = geom.clientSize(container),\r\n        \tdim = {\r\n        \t\tl : 0,\r\n        \t\tt : 0,\r\n        \t\tw : size.width,\r\n        \t\th : size.height,\r\n        \t},\r\n        \tchildren = finder.children(container,options.items);\r\n\r\n\t\tchildren = children.filter(function(item){ return datax.data(item,\"region\") != \"client\"; })\r\n\t\t\t.concat(children.filter(function(item){ return datax.data(item,\"region\") == \"client\"; }));\r\n\r\n\t\t// set positions/sizes\r\n\t\tchildren.forEach(function(item){\r\n\t\t\tvar region = datax.data(item,\"region\"),\r\n\t\t\t    childSize = geom.size(item);\r\n\r\n\t\t\tif(!region){\r\n\t\t\t\tthrow new Error(\"No dock setting for \" + item.id)\r\n\t\t\t}\r\n\r\n\t\t\t// set elem to upper left corner of unused space; may move it later\r\n\r\n\t\t\tstyler.css(elm,{\r\n\t\t\t\tposition : \"absolute\"\r\n\t\t\t});\r\n\r\n\t\t\t// Size adjustments to make to this child widget\r\n\t\t\tvar bounds = {\r\n\t\t\t\tleft : dim.l,\r\n\t\t\t\ttop : dim.t\r\n\t\t\t};\r\n\r\n\t\t\t// set size && adjust record of remaining space.\r\n\t\t\t// note that setting the width of a <div> may affect its height.\r\n\t\t\tif(region == \"top\" || region == \"bottom\"){\r\n\t\t\t\tbounds.width = dim.w;\r\n\t\t\t\tdim.h -= childSize.height;\r\n\t\t\t\tif(\"region\" == \"top\"){\r\n\t\t\t\t\tdim.t += childSize.height;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tbounds.top = dim.t + dim.h;\r\n\t\t\t\t}\r\n\t\t\t}else if(region == \"left\" || region == \"right\"){\r\n\t\t\t\tbounds.height = dim.h;\r\n\t\t\t\tdim.w -= childSize.width;\r\n\t\t\t\tif(pos == \"left\"){\r\n\t\t\t\t\tdim.l += childSize.width;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tbounds.left = dim.l + dim.w;\r\n\t\t\t\t}\r\n\t\t\t}else if(region == \"client\"){\r\n\t\t\t\tbounds.width = dim.w;\r\n\t\t\t\tbounds.height = dim.h;\r\n\t\t\t}\r\n\r\n\t\t\tgeom.relativeRect(item,bounds);\r\n\t\t});\r\n\r\n\r\n    };\r\n    \r\n    return dock;    \r\n\r\n});\r\n\ndefine('skylark-utils-layout/flow',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils/query\",\r\n    \"./layouts\",\r\n], function(langx,$,layouts) {\r\n    // summary:\r\n    //  The flow layouter is a layout manager that adds items to the right sequentially from the left. \r\n    //  If it can not be added to the right side, it will be added back to the left one position to the left.\r\n    //  It does not change the size of the item added as a big feature of the flow layouter at all. \r\n    //  Therefore, it is placed as it is with the recommended size that the added item has or the explicitly specified size.\r\n\r\n    var flow = layouts.flow = function(container,options) {\r\n        var options = langx.mixin({\r\n            items : \".item\" // children element selector for item\r\n        },options)       \r\n        var $items = $(container).children(options.items);        \r\n        $items.css({\r\n            \"left\" : \"0px\",\r\n            \"top\" : \"0px\",\r\n            \"position\" : \"relative\",\r\n            \"display\" : \"inline-block\"\r\n        });\r\n    };\r\n    \r\n    return flow;\r\n    \r\n});\r\n\ndefine('skylark-utils-layout/grid',[\r\n    \"skylark-langx/langx\",\r\n    \"./layouts\"\r\n], function(langx,layouts) {\r\n    //TODO: \r\n    var grid = layouts.grid = function(container,options) {\r\n        throw new Error (\"This method is not implemented!\");\r\n    };\r\n\r\n    return grid;\r\n});\r\n\ndefine('skylark-utils-layout/masonry',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils/finder\",\r\n    \"skylark-utils/geom\",\r\n    \"skylark-utils/styler\",\r\n    \"./layouts\"\r\n],function(langx,finder,geom,styler,layouts) {\r\n    // summary:\r\n    //  The masnory layouter is a masonry grid layout manager. \r\n   \r\n    var MasonryLayouter = langx.klass({\r\n        _measureColumns: function(children, bounds, container) {\r\n\r\n            var _ = this._,\r\n                calculated = _.calculated;\r\n            // if columnWidth is 0, default to outerWidth of first item\r\n            if (!_.columnWidth) {\r\n                var firstItem = children[0];\r\n                // columnWidth fall back to item of first element\r\n                calculated.columnWidth = firstItem && firstItem.bounds().extraWidth() || bounds.width;\r\n            } else {\r\n                calculated.columnWidth = _.columnWidth;\r\n            }\r\n\r\n            var columnWidth = calculated.columnWidth += _.gutter;\r\n\r\n            // calculate columns\r\n            var containerWidth = bounds.width + _.gutter;\r\n            var cols;\r\n            if (_.cols) {\r\n                cols = _.cols;\r\n            } else {\r\n                var cols = containerWidth / columnWidth;\r\n                // fix rounding errors, typically with gutters\r\n                var excess = columnWidth - containerWidth % columnWidth;\r\n                // if overshoot is less than a pixel, round up, otherwise floor it\r\n                var mathMethod = excess && excess < 1 ? 'round' : 'floor';\r\n                cols = Math[mathMethod](cols);\r\n            }\r\n            calculated.cols = Math.max(cols, 1);\r\n        },\r\n\r\n        _positionItem: function(item, x, y, isInstant) {\r\n            styler.css(item, {\r\n                position: \"absolute\" \r\n            });\r\n            if (isInstant) {\r\n                // if not transition, just set CSS\r\n                geom.relativePositionitem(item,{\r\n                    left : x,\r\n                    top : y\r\n                });\r\n            } else {\r\n                item[this._.animation] ? item[this._.animation](x, y) : item.moveto(x, y);\r\n            }\r\n        },\r\n        _getColGroup: function(colSpan) {\r\n            var _ = this._,\r\n                calculated = _.calculated;\r\n\r\n            if (colSpan < 2) {\r\n                // if brick spans only one column, use all the column Ys\r\n                return calculated.colYs;\r\n            }\r\n\r\n            var colGroup = [];\r\n            // how many different places could this brick fit horizontally\r\n            var groupCount = calculated.cols + 1 - colSpan;\r\n            // for each group potential horizontal position\r\n            for (var i = 0; i < groupCount; i++) {\r\n                // make an array of colY values for that one group\r\n                var groupColYs = calculated.colYs.slice(i, i + colSpan);\r\n                // and get the max value of the array\r\n                colGroup[i] = Math.max.apply(Math, groupColYs);\r\n            }\r\n            return colGroup;\r\n        },\r\n\r\n        _getItemLayoutPosition: function(item) {\r\n            var _ = this._,\r\n                calculated = _.calculated;\r\n\r\n            var itemSize = geom.marginSize(item);\r\n            // how many columns does this brick span\r\n            var remainder = itemSize.width % calculated.columnWidth;\r\n            var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';\r\n            // round if off by 1 pixel, otherwise use ceil\r\n            var colSpan = Math[mathMethod](itemSize.width / calculated.columnWidth);\r\n            colSpan = Math.min(colSpan, calculated.cols);\r\n\r\n            var colGroup = this._getColGroup(colSpan);\r\n            // get the minimum Y value from the columns\r\n            var minimumY = Math.min.apply(Math, colGroup);\r\n            var shortColIndex = colGroup.indexOf(minimumY);\r\n\r\n            // position the brick\r\n            var position = {\r\n                x: calculated.columnWidth * shortColIndex,\r\n                y: minimumY\r\n            };\r\n\r\n            // apply setHeight to necessary columns\r\n            var setHeight = minimumY + itemSize.height;\r\n            var setSpan = calculated.cols + 1 - colGroup.length;\r\n            for (var i = 0; i < setSpan; i++) {\r\n                calculated.colYs[shortColIndex + i] = setHeight;\r\n            }\r\n            return position;\r\n        },\r\n\r\n        \"_filterItems\": function(items) {\r\n            return items;\r\n        },\r\n\r\n        \"_resetLayout\": function(children, bounds, container) {\r\n            var _ = this._,\r\n                calculated = _.calculated;\r\n            this._measureColumns(children, bounds, container);\r\n\r\n            // reset column Y\r\n            calculated.colYs = [];\r\n            for (var i = 0; i < calculated.cols; i++) {\r\n                calculated.colYs.push(0);\r\n            }\r\n            calculated.maxY = 0;\r\n        },\r\n\r\n        \"_calcLayout\": function(children, bounds, container) {\r\n            this._resetLayout(children, bounds, container);\r\n            var calcInfos = [];\r\n\r\n            children.forEach(function(item) {\r\n                // get x/y object from method\r\n                var position = this._getItemLayoutPosition(item);\r\n                // enqueue\r\n                position.item = item;\r\n                //position.isInstant = isInstant || item.isLayoutInstant;\r\n                calcInfos.push(position);\r\n            }, this);\r\n            return calcInfos;\r\n        },\r\n\r\n        \"_postLayout\": function(calcInfos, container) {\r\n            var _ = this._;\r\n            if (_.autoFit) {\r\n                //var size = container.size;\r\n                //size.height = _.calculated.maxY;\r\n                //container.size = size;\r\n                //TODO: needs a better implementation\r\n                var calculated = _.calculated,\r\n                    maxY = Math.max.apply(Math, calculated.colYs);\r\n\r\n                container.domNode.style.height = maxY + \"px\";\r\n            }\r\n            calcInfos.forEach(function(calcInfo) {\r\n                this._positionItem(calcInfo.item, calcInfo.x, calcInfo.y, calcInfo.isInstant);\r\n            }, this);\r\n            //return children;\r\n        },\r\n\r\n        \"layout\": function() {\r\n            var _ = this._,\r\n                container = _.container,\r\n                children = finder.children(container,_.items),\r\n                bounds = geom.clientSize(container);\r\n                \r\n            var calcInfos = this._calcLayout(children,bounds,container);\r\n            this._postLayout(calcInfos,container);\r\n        },\r\n\r\n        \"init\": function(container,options) {\r\n            var _ = this._ =  langx.mixin ({\r\n                autoFit: true, //dd\r\n                columnWidth: 0, //dd\r\n                cols: 0, //d\r\n                gutter: 0, //\r\n                animation: \"moveto\", //dd\r\n                calculated: {\r\n                    colYs: null,\r\n                    columnWidth: 0,\r\n                    cols: 0\r\n                }\r\n            },options);\r\n            _.container = container;\r\n        }\r\n    });\r\n\r\n    \r\n    var masonry  = layouts.masonry = function(container,options) {\r\n        var layouter = new MasonryLayouter(container,options);\r\n        layouter.layout();\r\n    };\r\n\r\n    return masonry;\r\n});\r\n\ndefine('skylark-utils-layout/rows',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils/query\",\r\n    \"./layouts\",\r\n], function(langx,$,layouts) {\r\n    // summary:\r\n    //  The bsgrid layouter is a layout manager that adds each child item to a separate row. \r\n\r\n    var rows = layouts.rows = function(container,options) {\r\n        var options = langx.mixin({\r\n            items : \".item\" // children element selector for item\r\n        },options)       \r\n        var $items = $(container).children(options.items);     \r\n        $items.css({\r\n            \"left\" : \"0px\",\r\n            \"top\" : \"0px\",\r\n            \"position\" : \"relative\",\r\n            \"display\" : \"list-item\"\r\n        });\r\n    };\r\n    \r\n    return rows;\r\n    \r\n});\r\n\ndefine('skylark-utils-layout/table',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils/query\",\r\n    \"./layouts\",\r\n], function(langx,$,layouts) {\r\n\r\n    var table = layouts.table = function(container,options) {\r\n        var options = langx.mixin({\r\n            items : \".item\" // children element selector for item\r\n        },options)       \r\n        var $items = $(container).children(options.items);             \r\n\r\n        $items.css({\r\n            \"width\" : \"100%\",\r\n            \"display\" : \"table-row\"\r\n        });\r\n\r\n        $items.each(function(){\r\n            $(this).children().css({\r\n                \"display\" : \"table-cell\"\r\n            });\r\n        })\r\n    };\r\n    \r\n    return table;    \r\n\r\n});\r\n\ndefine('skylark-utils-layout/main',[\r\n    \"./layouts\",\r\n    \"./box\",\r\n    \"./bsgrid\",\r\n    \"./columns\",\r\n    \"./dock\",\r\n    \"./DockStyle\",\r\n    \"./flow\",\r\n    \"./grid\",\r\n    \"./masonry\",\r\n    \"./rows\",\r\n    \"./table\"\r\n], function(layouts) {\r\n\r\n\treturn layouts;\r\n});\ndefine('skylark-utils-layout', ['skylark-utils-layout/main'], function (main) { return main; });\n\n"]}